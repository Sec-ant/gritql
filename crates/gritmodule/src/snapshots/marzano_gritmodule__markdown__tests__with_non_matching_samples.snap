---
source: crates/gritmodule/src/markdown.rs
expression: patterns
---
- config:
    name: no_eq_null
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
    level: info
    title: "Compare `null` using  `===` or `!==`"
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags: ~
    samples:
      - name: "`$val == null` => `$val === null`"
        input: "if (val == null) {\n  done();\n}\n"
        output: "if (val === null) {\n  done();\n}\n"
        input_range:
          start:
            line: 25
            column: 1
          end:
            line: 28
            column: 1
          startByte: 705
          endByte: 736
        output_range:
          start:
            line: 31
            column: 1
          end:
            line: 34
            column: 1
          startByte: 755
          endByte: 787
      - name: "`$val != null` => `$val !== null`"
        input: "if (val != null) {\n  done();\n}\n"
        output: "if (val !== null) {\n  done();\n}\n"
        input_range:
          start:
            line: 39
            column: 1
          end:
            line: 42
            column: 1
          startByte: 844
          endByte: 875
        output_range:
          start:
            line: 45
            column: 1
          end:
            line: 48
            column: 1
          startByte: 894
          endByte: 926
      - name: "`$val != null` => `$val !== null` into `while`"
        input: "while (val != null) {\n  did();\n}\n"
        output: "while (val !== null) {\n  did();\n}\n"
        input_range:
          start:
            line: 53
            column: 1
          end:
            line: 56
            column: 1
          startByte: 996
          endByte: 1029
        output_range:
          start:
            line: 59
            column: 1
          end:
            line: 62
            column: 1
          startByte: 1048
          endByte: 1082
      - name: "Do not change `$val === null`"
        input: "if (val === null) {\n  done();\n}\n"
        output: ~
        input_range:
          start:
            line: 67
            column: 1
          end:
            line: 70
            column: 1
          startByte: 1135
          endByte: 1167
        output_range: ~
      - name: "Do not change `$val !== null`"
        input: "while (val !== null) {\n  doSomething();\n}\n"
        output: ~
        input_range:
          start:
            line: 75
            column: 1
          end:
            line: 78
            column: 1
          startByte: 1210
          endByte: 1252
        output_range: ~
    path: no_eq_null.md
    position:
      line: 10
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\ntags: #good\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n## `$val == null` => `$val === null`\n\n```javascript\nif (val == null) {\n  done();\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null`\n\n```javascript\nif (val != null) {\n  done();\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while`\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null`\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null`\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module: ~
  local_name: no_eq_null
